import axios from 'axios';
import { notification } from 'antd';

const API_BASE_URL = 'http://localhost:5000'; // –£–∫–∞–∂–∏ —Å–≤–æ–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞

const apiClient = axios.create({
    baseURL: API_BASE_URL,
    headers: {
        'Content-Type': 'application/json',
    },
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
const showErrorNotification = (error: any) => {
    const errorMessage = error?.response?.data || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    notification.error({
        message: '–û—à–∏–±–∫–∞',
        description: errorMessage,
        duration: 5,
    });
};

// üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏
export const shortenUrl = async (originalUrl: string, alias?: string) => {
    try {
        const { data } = await apiClient.post('/shorten', { originalUrl, alias });
        return data; // –í–µ—Ä–Ω–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π URL
    } catch (error) {
        showErrorNotification(error);
        throw error;
    }
};

// üîπ –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ
export const redirectToOriginal = async (shortUrl: string) => {
    try {
        const { data } = await apiClient.get(`/${encodeURIComponent(shortUrl)}`);
        return data; // –í–µ—Ä–Ω–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
    } catch (error) {
        showErrorNotification(error);
        throw error;
    }
};

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ
export const getUrlInfo = async (shortUrl: string) => {
    try {
        const { data } = await apiClient.get(`/info/${encodeURIComponent(shortUrl)}`);
        return data; // –í–µ—Ä–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–µ
    } catch (error) {
        showErrorNotification(error);
        throw error;
    }
};

// üîπ –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏
export const deleteUrl = async (shortUrl: string) => {
    try {
        const { data } = await apiClient.delete(`/delete/${encodeURIComponent(shortUrl)}`);
        notification.success({
            message: '–£—Å–ø–µ—à–Ω–æ',
            description: '–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞',
        });
        return data; // –í–µ—Ä–Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    } catch (error) {
        showErrorNotification(error);
        throw error;
    }
};

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ
export const getUrlStatistics = async (shortUrl: string) => {
    try {
        const { data } = await apiClient.get(`/statistics/${encodeURIComponent(shortUrl)}`);
        return data; // –í–µ—Ä–Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    } catch (error) {
        showErrorNotification(error);
        throw error;
    }
};